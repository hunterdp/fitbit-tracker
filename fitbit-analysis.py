# -*- coding: utf-8 -*-
"""Generates analytics for data generated by fitbit-tracker.py 

Reads in fitbit data generated by the fitbit-tracker.py program and generates
a series of data insights, graphs, charts and/or tables. 

"""
import argparse
import json
import os
import os.path
import sys
import pandas as pd
import logging
import logging.handlers
import io
import random

from os import path
from datetime import datetime
from datetime import date
from datetime import timedelta

# Globals
__AUTHOR__ = 'David Hunter'
__VERSION__ = 'fitbit-analysis ver beta-0.1'
__LOG_NAME__ = 'fitbit-analysis.log'
__TITLE__ = 'fitebit-analysis.py'

"""
The basic flow is to:
  - Create a dataframe consiting of hh:mm:ss and put in NaaN numbers since we just really need it to act as an index.
  - Set the index to be the Time
  - Read in a dataframe, sets its index to Time and merge it using a left key.
  - Create a header of the date we have data for
  - Add the indvidual data to the data frame as a new column
  - We end up with a large data set that will show for the various days, what the heartrate is for each second of the day
"""
def get_hr_dataframe(fname):
    """ read in a heartrate file into a dataframe and convert the index into a timedelta value
        and return a dataframe """
    hr_df = pd.read_csv(fname, sep=',', index_col=0)
    hr_df.index = pd.TimedeltaIndex(hr_df.index)
    return(hr_df)
    
def get_file_list(dir_name, fragment):
    """ Gets a list of files within a directory based on a string in the filename """
    all_files = list()
    list_of_files = os.listdir(dir_name)
    for file_name in list_of_files:
      if fragment in file_name:
        full_path_name = os.path.join(dir_name, file_name)
        all_files.append(full_path_name)

    return(all_files) 

if __name__ == '__main__':
    # TODO(dph): Make this simplier and not dependent upon the external index file
    # # Initalize a dataframe to consolidate the heart rate files.  Generate an index that consists
    # of HH:MM:SS and convert it to the timedelta index.
    rng = pd.date_range(start='00:00:00', end='23:59:59', freq='S')
    base_df = pd.DataFrame({'Time': rng.strftime('%H:%M:%S'), 'Day': '22'})
    base_df.to_csv('./results/hr__intraday_index.csv', columns=['Time', 'Heart Rate'], header=True, index=False)
    merge_df = get_hr_dataframe('./results/hr__intraday_index.csv')
    
    # Create an array of files to merge and for each get a dataframe of the results for the day.
    file_list = get_file_list('./results', 'hr_intraday')
    for fname in file_list:
        hr_df = get_hr_dataframe(fname)
        merge_df = pd.merge(merge_df, hr_df, left_index=True, right_index=True, how='left')

    print(merge_df)
    print(merge_df.describe())

